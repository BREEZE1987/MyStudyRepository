<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	namespace 命名空间，作用是对 sql 进行分类化管理，理解 sql 隔离
	注意：使用 mapper 代理方法开发，namespace 有特殊重要的作用
 -->
 
<mapper namespace="test">
	
	<!-- 在映射文件中要配置很多 SQL 语句 -->
	
	<!-- 通过 select 执行对数据库的查询 -->
	<!-- 
		id:标识映射文件中的 SQL，将 SQL 语句封装到 mapperStatement 对象中，所以 id 称为 statement 的 id
		
		parameterType:指定输入参数的类型，这里指定 int 型
		
		#{}表示一个点位符号
		#{id}:其中的 id 表示接收输入的参数，参数名称就是 id，如果输入的参数是简单类型，#{} 中的参数名可以任意，可以是 value或其他名称
		
		resultType:指定 SQL 输出结果所映射的 Java 对象类型，select 指定 resultType 表示单条记录映射成的 Java 对象
	-->
	<select id="findUserById" parameterType="int" resultType="com.breeze.mybatis.pojo.User">
		SELECT * FROM `users` WHERE `id` = #{value}
	</select>
	
	<!-- 根据用户名称模糊查询用户信息 -->
	<!-- 
		resultType: 指定就是单条记录所映射的 Java 对象类型
		${}: 表示拼接 SQL 字符串，将拼接的内容不加任何修饰拼接在 SQL 中。
		使用 ${ } 拼接 SQL，引起 SQL 注入，不建义使用
		${value}: 接收输入参数的内容，如果传入类型是简单类型，${ } 中只能使用 value   
	-->
	<select id="findUsersByName" parameterType="java.lang.String" resultType="com.breeze.mybatis.pojo.User">
		SELECT * FROM users WHERE name LIKE '%${value}%'
	</select>
	
	<!-- 添加用户 -->
	<!--
		parameterType：指定输入参数类型是 pojo（包括用户信息） 
		#{} 中指定 pojo 的属性名，接收到  pojo 对象的属性值， MyBatis 通过 OGNL 获得对象的属性值
	 -->
	 <insert id="insertUser" parameterType="com.breeze.mybatis.pojo.User">
	 	<!--
	 		将插入数据的主键返回，返回到  User 对象中
	 		SELECT LAST_INSERT_ID(); 得到刚刚 Insert 进去的记录的主键值，只适用于自增主键
	 		keyProperty: 将查询到的主键值设置到  parameterType 指定的对象的那个属性
	 		order: SELECT LAST_INSERT_ID() 执行顺序，相对于 Insert 语句来说它的执行顺序
	 		resultType: 指定 SELECT LAST_INSERT_ID()的结果类型 
	 	 -->
	 	<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
	 		SELECT LAST_INSERT_ID()
	 	</selectKey>
	 	
	 	
	 	<!--
	 		使用 MySql 的 UUID() 函数成主键
	 		执行过程：
	 		首先，通过 UUID() 得到主键，将主键设置到 User 对象的 id 属性中
	 		其次，在 insert 执行时，从 User 对象中取 id 属性值 
	 		
		 	<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
		 		SELECT UUID()
		 	</selectKey>
		 	
		 	INSERT INTO `users`(id, `name`, sex, birthday, address) 
		 	VALUES (#{id}, #{name}, #{sex}, #{birthday}, #{address})
	 		 
	 	 -->
	 	
	 	INSERT INTO `users`(`name`, sex, birthday, address) 
	 	VALUES (#{name}, #{sex}, #{birthday}, #{address})
	 </insert>
	 
	 <!-- 删除用户 -->
	 <!-- 根据用户 id 删除用户，需要输入 id 值 -->
	 <delete id="deleteUserById" parameterType="java.lang.Integer">
	 	DELETE FROM users WHERE id = #{id}
	 </delete>
	 
	 <!-- 更新用户 -->
	 <!--
	 	根据 id 更新用户，
	 	分析：
	 	需要传用户的 id
	 	需要传入用户信息
	 	parameterType 指定 User 对象，包括 id 和更新信息，注意：id 必须存
	 	#{id}：从输入 User 对象中获得 id 属性值
	  -->
	 <update id="updateUserById" parameterType="com.breeze.mybatis.pojo.User">
	 	UPDATE users SET `name` = #{name}, birthday = #{birthday}, 
	 		sex = #{sex}, address = #{address} WHERE id = #{id}
	 </update>
	
</mapper>